$date
	Mon Apr 21 23:21:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module four_bit_adder_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$var wire 3 ) carry [2:0] $end
$scope module fa0 $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 % cin $end
$var wire 1 , cout $end
$var wire 1 - sum $end
$upscope $end
$scope module fa1 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 0 cin $end
$var wire 1 1 cout $end
$var wire 1 2 sum $end
$upscope $end
$scope module fa2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 1 7 sum $end
$upscope $end
$scope module fa3 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 " cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope task test_four_bit_adder $end
$var reg 4 < a_t [3:0] $end
$var reg 4 = b_t [3:0] $end
$var reg 1 > cin_t $end
$var reg 1 ? expected_cout $end
$var reg 4 @ expected_sum [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b11 @
0?
0>
b10 =
b1 <
0;
0:
09
08
07
06
05
04
03
12
01
00
1/
0.
1-
0,
0+
1*
b0 )
b11 (
b10 '
b1 &
0%
b10 $
b1 #
0"
b11 !
$end
#10000
1"
1:
16
15
11
02
10
0-
b111 )
1,
07
b0 !
b0 (
0;
1+
0/
1.
13
18
b1 $
b1 '
b1111 #
b1111 &
1?
b0 @
b1 =
b1111 <
#20000
0"
1;
0:
06
17
05
01
12
00
b0 )
0,
b1111 !
b1111 (
1-
0+
1/
19
0*
0.
08
1%
b1010 $
b1010 '
b100 #
b100 &
0?
b1111 @
1>
b1010 =
b100 <
#30000
